/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zhigalko.common.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UpdateCustomerNameAvroEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1433165721697149902L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UpdateCustomerNameAvroEvent\",\"namespace\":\"com.zhigalko.common.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"aggregateId\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UpdateCustomerNameAvroEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UpdateCustomerNameAvroEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UpdateCustomerNameAvroEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UpdateCustomerNameAvroEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UpdateCustomerNameAvroEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UpdateCustomerNameAvroEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UpdateCustomerNameAvroEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UpdateCustomerNameAvroEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UpdateCustomerNameAvroEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence name;
  private java.lang.CharSequence timestamp;
  private java.lang.CharSequence eventType;
  private long aggregateId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UpdateCustomerNameAvroEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param timestamp The new value for timestamp
   * @param eventType The new value for eventType
   * @param aggregateId The new value for aggregateId
   */
  public UpdateCustomerNameAvroEvent(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence timestamp, java.lang.CharSequence eventType, java.lang.Long aggregateId) {
    this.id = id;
    this.name = name;
    this.timestamp = timestamp;
    this.eventType = eventType;
    this.aggregateId = aggregateId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return timestamp;
    case 3: return eventType;
    case 4: return aggregateId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    case 3: eventType = (java.lang.CharSequence)value$; break;
    case 4: aggregateId = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'aggregateId' field.
   * @return The value of the 'aggregateId' field.
   */
  public long getAggregateId() {
    return aggregateId;
  }


  /**
   * Sets the value of the 'aggregateId' field.
   * @param value the value to set.
   */
  public void setAggregateId(long value) {
    this.aggregateId = value;
  }

  /**
   * Creates a new UpdateCustomerNameAvroEvent RecordBuilder.
   * @return A new UpdateCustomerNameAvroEvent RecordBuilder
   */
  public static com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder newBuilder() {
    return new com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder();
  }

  /**
   * Creates a new UpdateCustomerNameAvroEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UpdateCustomerNameAvroEvent RecordBuilder
   */
  public static com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder newBuilder(com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder other) {
    if (other == null) {
      return new com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder();
    } else {
      return new com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder(other);
    }
  }

  /**
   * Creates a new UpdateCustomerNameAvroEvent RecordBuilder by copying an existing UpdateCustomerNameAvroEvent instance.
   * @param other The existing instance to copy.
   * @return A new UpdateCustomerNameAvroEvent RecordBuilder
   */
  public static com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder newBuilder(com.zhigalko.common.schema.UpdateCustomerNameAvroEvent other) {
    if (other == null) {
      return new com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder();
    } else {
      return new com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UpdateCustomerNameAvroEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UpdateCustomerNameAvroEvent>
    implements org.apache.avro.data.RecordBuilder<UpdateCustomerNameAvroEvent> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence eventType;
    private long aggregateId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.aggregateId)) {
        this.aggregateId = data().deepCopy(fields()[4].schema(), other.aggregateId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing UpdateCustomerNameAvroEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zhigalko.common.schema.UpdateCustomerNameAvroEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.aggregateId)) {
        this.aggregateId = data().deepCopy(fields()[4].schema(), other.aggregateId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.eventType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'aggregateId' field.
      * @return The value.
      */
    public long getAggregateId() {
      return aggregateId;
    }


    /**
      * Sets the value of the 'aggregateId' field.
      * @param value The value of 'aggregateId'.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder setAggregateId(long value) {
      validate(fields()[4], value);
      this.aggregateId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'aggregateId' field has been set.
      * @return True if the 'aggregateId' field has been set, false otherwise.
      */
    public boolean hasAggregateId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'aggregateId' field.
      * @return This builder.
      */
    public com.zhigalko.common.schema.UpdateCustomerNameAvroEvent.Builder clearAggregateId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UpdateCustomerNameAvroEvent build() {
      try {
        UpdateCustomerNameAvroEvent record = new UpdateCustomerNameAvroEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.eventType = fieldSetFlags()[3] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.aggregateId = fieldSetFlags()[4] ? this.aggregateId : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UpdateCustomerNameAvroEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UpdateCustomerNameAvroEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UpdateCustomerNameAvroEvent>
    READER$ = (org.apache.avro.io.DatumReader<UpdateCustomerNameAvroEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.name);

    out.writeString(this.timestamp);

    out.writeString(this.eventType);

    out.writeLong(this.aggregateId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

      this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);

      this.aggregateId = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        case 3:
          this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);
          break;

        case 4:
          this.aggregateId = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










